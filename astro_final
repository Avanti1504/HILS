import os
import requests
import json
import time
import pandas as pd
import numpy as np
from scipy.spatial.transform import Rotation

# Function to convert RA, DEC, NCP to quaternion
def ra_dec_ncp_to_quaternion(ra, dec, ncp):
    try:
        ra_rad = np.deg2rad(ra)
        dec_rad = np.deg2rad(-dec)
        ncp_rad = np.deg2rad(ncp)

        r = Rotation.from_euler('ZYX', [ra_rad, dec_rad, ncp_rad])
        q = r.as_quat()
        return q
    except:
        return [np.nan, np.nan, np.nan, np.nan]  # Return empty quaternion if computation fails

def submit_and_process_image(image_path, session_key, successful_calibrations):
    try:
        with open(image_path, 'rb') as file:
            files = {
                'request-json': (None, json.dumps({
                    'session': session_key,
                    'allow_commercial_use': 'n',
                    'allow_modifications': 'n',
                    'publicly_visible': 'n',
                   
                }), 'application/json'),
                'file': ('image.jpg', file, 'application/octet-stream')
            }

            upload_response = requests.post(upload_url, files=files)

        upload_response.raise_for_status()  # Raise an exception for HTTP errors

        # Parse the response
        response_data = json.loads(upload_response.text)
        submission_id = response_data.get('subid')
        submission_hash = response_data.get('hash')

        print(f"Submission ID: {submission_id}")
        print(f"Submission Hash: {submission_hash}")

        # Step 3: Get submission status
        submission_status_url = f'http://nova.astrometry.net/api/submissions/{submission_id}'
        submission_status_response = requests.get(submission_status_url)
        submission_status = json.loads(submission_status_response.text)

        print("Submission Status:")
        print(submission_status)

        # Wait for the submission to complete before checking job status
        while not submission_status.get('jobs'):
            print("Waiting for submission to start...")
            time.sleep(10)
            submission_status_response = requests.get(submission_status_url)
            submission_status = json.loads(submission_status_response.text)

        job_id = submission_status['jobs'][0]

        # Step 4: Wait for job status to be "success"
        job_status_url = f'http://nova.astrometry.net/api/jobs/{job_id}'
        while True:
            job_status_response = requests.get(job_status_url)
            job_status = json.loads(job_status_response.text)

            if job_status.get('status') == 'success':
                break

            if job_status.get('status') == 'failed':
                print(f"Job failed for image: {image_path}")
                return

            print("Waiting for job to complete...")
            time.sleep(10)

        print("Job Status:")
        print(job_status)

        # Step 5: Get job results (calibration)
        calibration_url = f'http://nova.astrometry.net/api/jobs/{job_id}/calibration/'
        calibration_response = requests.get(calibration_url)
        calibration_results = json.loads(calibration_response.text)

        print("Calibration Results:")
        print(calibration_results)

        # Check if calibration is successful
        if 'parity' in calibration_results:
            quaternion = ra_dec_ncp_to_quaternion(
                calibration_results['ra'],
                calibration_results['dec'],
                calibration_results['orientation']
            )

            successful_calibrations.append({
                'image_path': image_path,
                'parity': calibration_results['parity'],
                'orientation': calibration_results['orientation'],
                'pixscale': calibration_results['pixscale'],
                'radius': calibration_results['radius'],
                'ra': calibration_results['ra'],
                'dec': calibration_results['dec'],
                'quaternion': quaternion
            })

    except requests.exceptions.HTTPError as errh:
        print(f"HTTP Error: {errh}")
        print(f"Upload failed for image: {image_path}. Response: {upload_response.text}")

    except Exception as e:
        print(f"Error: {e}")
        print(f"Upload failed for image: {image_path}. Response: {upload_response.text}")


# Step 1: Log in and get the session key
api_key = "API-KEY"
login_url = 'http://nova.astrometry.net/api/login'
login_payload = {'request-json': json.dumps({"apikey": api_key})}
login_response = requests.post(login_url, data=login_payload)

# Parse the session key from the login response
session_key = json.loads(login_response.text).get('session')

if not session_key:
    print(f"Login failed. Response: {login_response.text}")
    exit()

# Step 2: Set the folder path containing images
folder_path = 'IMG-FOLDER-PATH'
upload_url = 'http://nova.astrometry.net/api/upload'

# List to store successful calibration results
successful_calibrations = []

# Step 3: Submit and process each image in the folder
for filename in os.listdir(folder_path):
    if filename.endswith(('.jpg', '.jpeg', '.png')):  # Adjust file extensions as needed
        image_path = os.path.join(folder_path, filename)
        print(f"\nProcessing image: {image_path}")
        submit_and_process_image(image_path, session_key, successful_calibrations)


# Step 4: Create a DataFrame and save to Excel if there are successful calibrations
if successful_calibrations:
    df = pd.DataFrame(successful_calibrations)
    excel_filename = 'RESULT-EXCEL-FILE'
    df.to_excel(excel_filename, index=False)
    print(f"Calibration results saved to {excel_filename}")
else:
    print("No successful calibrations to save.")
